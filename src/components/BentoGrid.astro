---

import { type BentoMatrices, type BentoMatrix } from '../types/bento';

interface Props {
    grid: BentoMatrices,
    class?: string,
}

const defaultStyle = "grid justify-center items-center gap-5";

const { grid, class: className } = Astro.props;

function processClasses(
    layout: BentoMatrix,
    layoutPrefix: string | null,
): Array<string> {


    for (let i = 0; i < 2; i++) {
        if (!Number.isInteger(layout[i])) {
            throw new Error(`${layoutPrefix} layout values must be integers.`);
        }
    }

    let prefix: string;

    if (layoutPrefix) {
        prefix = `${layoutPrefix}:`;
    } else {
        prefix = "";
    }

    const cols = `${prefix}grid-cols-${layout[0]}`;
    const rows = `${prefix}grid-rows-${layout[1]}`;

    let res: Array<string> = [cols, rows];

    return res;
}

let classes = [className, defaultStyle, className];

if (grid.sm) classes = classes.concat(processClasses(grid.sm, "sm"));
if (grid.md) classes = classes.concat(processClasses(grid.md, "md"));
if (grid.lg) classes = classes.concat(processClasses(grid.lg, "lg"));
if (grid.default) classes = classes.concat(processClasses(grid.default, null));

const classesStr = classes.join(" ");

---

<section class={classesStr}>
    <slot/>
</section>
