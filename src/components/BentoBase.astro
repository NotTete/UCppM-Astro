---
import { undefined } from "astro:schema";
import { type BentoLayouts, type BentoLayout } from "../types/bento";
interface Props {
    layout: BentoLayouts;
    class?: string;
}

const { class: className, layout, ...rest } = Astro.props;

function processClasses(
    layout: BentoLayout,
    layoutPrefix: string | null,
): Array<string> {


    for (let i = 0; i < 4; i++) {
        if (!Number.isInteger(layout[i])) {
            throw new Error(`${layoutPrefix} layout values must be integers.`);
        }
    }

    let prefix: string;

    if (layoutPrefix) {
        prefix = `${layoutPrefix}:`;
    } else {
        prefix = "";
    }
    const colPosition = `${prefix}col-start-${layout[0]}`;
    const rowPosition = `${prefix}row-start-${layout[1]}`;

    const colSpan = `${prefix}col-span-${layout[2]}`;
    const rowSpan = `${prefix}row-span-${layout[3]}`;

    let res: Array<string> = [colPosition, rowPosition, colSpan, rowSpan];

    return res;
}

let classes = [className];

if (layout.sm) classes = classes.concat(processClasses(layout.sm, "sm"));
if (layout.md) classes = classes.concat(processClasses(layout.md, "md"));
if (layout.lg) classes = classes.concat(processClasses(layout.lg, "lg"));
if (layout.default) classes = classes.concat(processClasses(layout.default, null));

const classesStr = classes.join(" ");
---

<div class={classesStr} {...rest}>
    <slot />
</div>
